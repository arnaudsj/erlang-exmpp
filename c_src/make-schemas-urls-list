#!/usr/bin/perl
# $Id$

use strict;
use warnings;
use utf8;

use LWP::Simple;
use XML::Simple;
use URI::WithBase;
use POSIX qw(strftime);

our $XMPP_SCHEMAS_URL = 'http://www.xmpp.org/schemas/';

sub main {
	my (@schemas_urls) = @_;

	unshift @schemas_urls, $XMPP_SCHEMAS_URL;

	# Prepare timestamp.
	my $now = strftime "%Y-%m-%dT%H:%M:%SZ", gmtime;

	# Print header.
	print << "EOF";
# \$Id\$
# $now
EOF

	foreach my $schemas_url (@schemas_urls) {
		print STDERR "===> $schemas_url\n";

		my $content = get($schemas_url);
		unless (defined $content) {
			print STDERR "Can't retrieve URL '$schemas_url'\n";
			next;
		}

		my $ref = XMLin($content);

		# Get the list of RFCs and XEPs.
		my $xeplist =
		  $ref->{'body'}->{'div'}->{'main'}->{'table'}->{'tr'};
		next unless defined $xeplist;

		# Drop the table header.
		shift @$xeplist;

		# Print the source URL.
		print << "EOF";

# --------------------------------------------------------------------
# Schemas from $schemas_url.
# --------------------------------------------------------------------
EOF

		my %entries;

		# Walk the XEP list.
		foreach my $xep (@$xeplist) {
			my $td = $xep->{'td'};
			next if ($td->[2] eq 'DEPRECATED');

			my $ns = $td->[0];
			my $url = $td->[1]->{'a'}->{'href'};
			my $home = $td->[2]->{'a'}->{'href'};
			my $title = $td->[2]->{'a'}->{'content'};

			# Absolutize URL.
			$url = URI::WithBase->new($url, $schemas_url)->abs();
			$home = URI::WithBase->new($home, $schemas_url)->abs();

			# Print current XEP entry.
			$entries{$title} = "" unless (exists $entries{$title});
			$entries{$title} .=<< "EOF";

# XEP: $title
# HOME: $home
# NS: $ns
$url
EOF
		}

		foreach my $title (sort keys %entries) {
			print $entries{$title};
		}
	}
}

main(@ARGV);
